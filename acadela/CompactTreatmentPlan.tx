Start:
    versionTag = AcaVersion
    (importList *= Import)?
    (
        (
            (defWorkspace = DefWorkspace)
            | (defObj *= DefineObj)
        )
    )#
;

AcaVersion:
    /(#aca)\d\.\d/
;

// Import Definition Level
Import:
    'import' importVar=ID 'from' path=STRING
;

// Workspace Definition Level
DefWorkspace:
    (workspace=Workspace
    workspaceProp=DefineCase)#

;
Workspace:
    'workspace' BasicIdentity
;

BasicIdentity:
    id=TextNoQuote
    ('staticId' Eq staticId=Text)?
;

GroupIdentity:
    (('staticId' Eq staticId=Text)? ('id' Eq id=Text) ('name' Eq name=Text))#
;

DefineCase:
    'define' case=Case
;

DefineObj:
    'define' object=Obj
;

Obj:
    (Case | Entity)
;

// Case Definition Level

Case:
    'case' casename = TextNoQuote
    (
        casePrefix = CasePrefix
        ('version' Eq version = INT)
        (
            responsibilities = Responsibilities
            setting = CaseSetting
            ('Trigger' hook += CaseHook)?

        )#
        stage += Stage
    )#
;

CaseSetting:
    'Setting'
    (
        caseOwner = CaseOwner
        (attrList += Attribute)?
        (casePatient = CasePatient)?
        (attrList += Attribute)?
    )#
;

CaseOwner:
    'CaseOwner' (id=TextNoQuote)?
        attr = LinkUserGroupAttr
;

CasePatient:
    'CasePatient' (id=TextNoQuote)?
        attr = LinkUserGroupAttr
;

LinkUserGroupAttr:
    directive = AttributeDirective
    (
        ('group' Eq group = Text)
        description = Description
        (attrProp = AttributeProp)?
    )#
;


Responsibilities:
    'Responsibilities'
    (
        groupList += Group
        userList += User
    )#
;

Group:
    'group' GroupIdentity
;

User:
    'user' BasicIdentity
;

Entity:
    "entity" name=TextNoQuote
    (
        description = Description
        (attrProp = AttributeProp)?
    )#
    (attrList += AttrList)?

;

AttrList:
    'attributelist'
    (attr += Entity | attr += Attribute)*
    'endAttributeList'
;

Attribute:
    "attribute" name=TextNoQuote
    (
        description = Description
        attrProp = AttributeProp
    )#
;

AttributeProp:
    directive = AttributeDirective
    (
        (externalId = ExternalId)?
        (additionalDescription = AdditionalDescription)?
        (uiRef = UiReference)?
        (defaultValues = DefaultValues)?
    )#
;

/********************
***** HTTPHOOK ******
********************/

CaseHook:
    'on' event = CaseHookEvent
    'invoke' url = STRING
;

HttpHook:
    'on' event = BaseEvent
    (
        ('invoke' url = STRING)
        ('method' method = HttpMethod)
        ('with failureMessage is' failureMessage = STRING )?
    )#
;

DualTaskHttpHook:
    'on' event = DualTaskEvent
    (
        ('invoke' url = STRING)
        ('method' method = HttpMethod)
        ('with failureMessage is' failureMessage = STRING )?
    )#
;


CaseHookEvent:
    'delete'
    | 'activate'
    | 'complete'
    | 'terminate'
;

BaseEvent:
    'available'
    | 'enable'
    | 'activate'
    | 'complete'
    | 'terminate'
    | 'correct'
    | 'delete'
;

DualTaskEvent:
    BaseEvent
    | 'activatehumanpart'
    | 'activateautopart'
    | 'completehumanpart'
    | 'completeautopart'
    | 'correcthumanpart'
    | 'correctautopart'
;

CaseDef:
    'casedefinition' caseDefName=TextNoQuote
;

CasePrefix:
    'prefix' Eq value=Text
;

MultiAttrModel:
    (attr+=Multiplicity
    attr+=CasePrefix
    attr+=UiReference)#
;

Description:
    ('description' Eq value=Text)
;

/***********************
******** STAGE *********
***********************/

Stage:
    'Stage' id=TextNoQuote
        directive = StageElementDirective
        (
            (description = Description)
            (ownerpath = OwnerPath)?
            (dynamicDescriptionPath = DynamicDescriptionPath)?
            (externalId = ExternalId)?
        )#

        taskList += Task
;

/***********************
******** TASK *********
***********************/

Task:

    HumanTask
    | AutomatedTask
    | DualTask

;

HumanTask:
    'HumanTask' id = TextNoQuote
        directive = StageElementDirective
        attrList = SharedTaskAttrs
        ('Trigger' hookList += HttpHook)?
        formList += Form
;

AutomatedTask:
    'AutoTask' id = TextNoQuote
        directive = StageElementDirective
        attrList = AutomatedTaskAttrs
        ('Trigger' hookList += HttpHook)?
        formList += Form
;

DualTask:
    'DualTask' id = TextNoQuote
        directive = StageElementDirective
        attrList = SharedTaskAttrs
        ('Trigger' hookList += DualTaskHttpHook)?
        formList += Form
;

AutomatedTaskAttrs:
    (
        description = Description
        (ownerPath = OwnerPath)?
        (externalId = ExternalId)?
        (dynamicDescriptionPath = DynamicDescriptionPath)?
        (precondition = Precondition)?
    )#
;

SharedTaskAttrs:
    (
        description = Description
        (ownerPath = OwnerPath)?
        (dueDatePath = DueDatePath)?
        (externalId = ExternalId)?
        (dynamicDescriptionPath = DynamicDescriptionPath)?
        (precondition = Precondition)?
    )#
;

Precondition:
    'Precondition'
    (
        ('condition' Eq entryCondition = STRING)
        ('previousStage' Eq entryStageList += STRING)+
    )#
;

/***********************
********* FORM *********
***********************/

Form:
    'Form' id = TextNoQuote
        directive = FormDirective
        description = Description
        fieldList += Field
;

Field:
    'Field' id = TextNoQuote
        directive = FieldDirective
        (
            description = Description
            | question = Question
        )
;

Question:
    'question' Eq text=STRING
     optionList += Option
;

Option:
    'option' key = STRING 'value' Eq value = STRING
;

/***********************
****** DIRECTIVES ******
***********************/

AttributeDirective:
    (multiplicity = Multiplicity)?
    (type = Type)?
;

StageElementDirective:
    (
        (mandatory = Mandatory)?
        (repeatable = Repeatable)?
        (activation = Activation)?
        (multiplicity = Multiplicity)?
    )#
;

FormDirective:
    (
        (mandatory = Mandatory)?
        (readOnly = ReadOnly)?
    )#
;

FieldDirective:
    (
        (mandatory = Mandatory)?
        (readOnly = ReadOnly)?
        (position = Position)?
        (multiplicity = Multiplicity)?
        (part = Part)?
        type = Type
    )#
;

/*TaskDirective:
    (
       (mandatory = Mandatory)?
       (repeatable = Repeatable)?
       (activation = Activation)?
       (multiplicity = Multiplicity)?
    )#
;*/

Multiplicity:
    Hash (
        'maxOne'
        | 'exactlyOne'
        | 'atLeastOne'
        // Default: | 'any'
    )
;

Type:
    Hash (
        DateType
        | NumType
        | 'entity'
        | 'selector'
        // TODO: Find other num types
    )
;

DateType:
    'date.after(TODAY)'
;

NumType:
    'number' '('
        ((Comparator INT) | (INT '-' INT))
    ')'
;

Part:
    Hash (
        'humanDuty'
        | 'systemDuty'
    )
;

Repeatable:
    Hash (
        'repeatSerial'
        | 'repeatParallel'
        // Default: | 'noRepeat'
    )
;

Mandatory:
    Hash (
        'mandatory'
        | 'notmandatory' // Default
    )
;

Activation:
    Hash (
        'manualActivate'
        | 'autoActivate'
        | 'activateWhen' '(' STRING ')'
    )
;

ReadOnly:
    Hash (
        'readOnly'
        // Default: | 'notReadOnly'
    )
;

Position:
    Hash (
        'stretched' // Default
        | 'left'
        | 'center'
        | 'right'
        | 'leftcenter'
        | 'centerright'
    )
;


/***********************
***** SHARED PROPS *****
************************/

AdditionalDescription:
    "additionalDescription" Eq value=STRING
;

DefaultValues:
    'defaultValues' Eq value=WrapValue
;

DynamicDescriptionPath:
    'dynamicDescriptionRef' Eq value=STRING
;

ExternalId:
    'externalId' Eq value = STRING
;

OwnerPath:
    'ownerpath' Eq value = STRING
;

UiReference:
    'uiRef' Eq value=Function
;

DueDatePath:
    'dueDateRef' Eq value=STRING
;

// Valid Function For Expression
ValidFunctionName:
    'number' | 'colors'
;

Function:
    ValidFunctionName
    '('
        (Expression | ParamPattern)
    ')'
;

ParamPattern:
    Text (',' Text)*
;

Expression:
    INT (Comparator ColorName Comparator INT)+
;

ColorName:
    'red'
    | 'blue'
    | 'green'
;

/*********************
******* TERMINAL *****
*********************/

HttpMethod:
    'get'
    | 'post'
    | 'put'
    | 'delete'
;

Comparator:
    '='
    | '<>'
    | '<='
    |'>='
    | '<'
    | '>'
;

Text:
    STRING
;


TextNoQuote:
    /([a-zA-Z0-9-_])*/
;

Eq:
    '='
;

// DirectiveSign
Hash:
    '#'
;

WrapValue:
    '[' (Text | TextNoQuote) ']'
;

Comment:
  (/\/\/.*$/
  | /\/\*.*$/
  | /\*.*$/
  | /.*[\*\/]$/ )
;