Start:
    (
        (importList *= Import)
        (
            (defWorkspace = DefWorkspace)
            | (defObj *= DefineObj)
        )
    )#
;

// Import Definition Level
Import:
    'import' importVar=ID 'from' path=STRING
;

// Workspace Definition Level
DefWorkspace:
    (workspace=Workspace
    workspaceProp=DefineCase)#

;
Workspace:
    'workspace' BasicIdentity
;

BasicIdentity:
    (('staticId' Eq staticId=Text)? ('id' Eq id=Text))#
;

GroupIdentity:
    (('staticId' Eq staticId=Text)? ('id' Eq id=Text) ('name' Eq name=Text))#
;

DefineCase:
    'define' case=Case
;

DefineObj:
    'define' object=Obj
;

Obj:
    (Case | Entity)
;

// Case Definition Level

Case:
    (
        ('case' casename=TextNoQuote)
        casePrefix = CasePrefix
        userGroupList += Group
        userList += User
        (
            entityList += Entity
            caseDef = CaseDef
        )#
    )#
;

Group:
    'group' GroupIdentity
;

User:
    'user' BasicIdentity
;

Entity:
    "entity" name=TextNoQuote
    (
        description = Description
        (attrProp = AttributeProp)?
    )#
    (attrList += AttrList)?

;

Type:
    ('type' Eq value=Text)
;

AttrList:
    'attributelist'
    (attr += Entity | attr += Attribute)*
    'endAttributeList'
;

Attribute:
    "attribute" name=TextNoQuote
    (
        description = Description
        attrProp = AttributeProp
    )#
;

AttributeProp:
    (
        (externalId = ExternalId)?
        (multiplicity = Multiplicity)?
        (additionalDescription = AdditionalDescription)?
        (uiRef = UiReference)?
        (type = Type)?
        (defaultValues = DefaultValues)?
    )#
;

CaseDef:
    'casedefinition' caseDefName=TextNoQuote
;

MultiAttrModel:
    (attr+=Multiplicity
    attr+=CasePrefix
    attr+=UiReference)#
;

Description:
    ('description' Eq value=Text)
;

CasePrefix:
    'prefix' Eq value=Text
;

// Shared Properties
Multiplicity:
    ('multiplicity' Eq value=Text)
;

UiReference:
    'uiReference' Eq value=Function
;

DefaultValues:
    'defaultValues' Eq value=WrapValue
;

AdditionalDescription:
    "additionalDescription" Eq value=STRING
;

ExternalId:
    "externalId" Eq value=STRING
;


// Valid Function For Expression
ValidFunctionName:
    'number' | 'colors'
;

Function:
    ValidFunctionName
    '('
        (Expression | ParamPattern)
    ')'
;

ParamPattern:
    Text (',' Text)*
;

Expression:
    INT (Comparator ColorName Comparator INT)+
;

ColorName:
    'red'
    | 'blue'
    | 'green'
;

Comparator:
    '='
    | '<>'
    | '<='
    |'>='
    | '<'
    | '>'
;

Text:
    STRING
;


TextNoQuote:
    /([a-zA-Z0-9-_])*/
;

Eq:
    '='
;

WrapValue:
    '[' (Text | TextNoQuote) ']'
;

Comment:
  (/\/\/.*$/
  | /\/\*.*$/
  | /\*.*$/
  | /.*[\*\/]$/ )
;