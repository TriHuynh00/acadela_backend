/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.io.Reader;

public class Parser implements ParserConstants {
        protected static ArrayList<String> opGroup;
        protected static String cakeType;
        protected static ArrayList<String> keyPairList;

        public Parser(String s) {
                this((Reader)(new java.io.StringReader(s)));

                opGroup     = new ArrayList<String>();
                keyPairList = new ArrayList<String>();
        }

        public static void main(String[] args) throws Exception {
                //Exp result = new Parser(new java.io.StringReader(args[0])).S();
                Exp result = new Parser(args[0]).S();

                System.out.println(result);
                System.out.println("Cake Type: " + cakeType);

                System.out.println(keyPairList);
        }

  static final public Exp S() throws ParseException {
    trace_call("S");
    try {
Exp e;
      e = DefineObj();
      jj_consume_token(0);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("S");
    }
}

//Exp E(): {Exp e1; Exp e2;}
//{
//  e1=T() ("+" e2=T() {e1 = new BinaryExp("+", e1, e2);} )* {return e1;}
//}
//
//Exp T(): {Exp e1; Exp e2;}
//{
//  e1=NumToken() ("*" e2=F() {e1 = new BinaryExp("*", e1, e2);} )* {return e1;}
//}
  static final public Exp DefineObj() throws ParseException {
    trace_call("DefineObj");
    try {
Token e1; Exp e2;
      jj_consume_token(COMMAND);
      e1 = jj_consume_token(CAKETYPE);
Parser.cakeType = e1.toString();
      label_1:
      while (true) {
        e2 = KeyPair();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEYWORD:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DefineObj");
    }
}

//Exp Struct(): { Token e1; Exp e2; }
//{
//	<STRUCTKEYWORD> "=" e2=StructObjAttr() {return e2;} 
//}
//
//Exp StructObjAttr(): { }
//
  static final public Exp KeyPair() throws ParseException {
    trace_call("KeyPair");
    try {
Token e1; Exp e2;
      e1 = jj_consume_token(KEYWORD);
      jj_consume_token(17);
      e2 = StrToken();
Parser.keyPairList.add(e1.toString() + ":" + e2.toString()); {if ("" != null) return new Str(e1.toString() + ":" + e2.toString());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KeyPair");
    }
}

  static final public Exp TopText() throws ParseException {
    trace_call("TopText");
    try {
Exp e1;
      jj_consume_token(KEYWORD);
      jj_consume_token(17);
      e1 = StrToken();
e1 = new TopText(e1);
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TopText");
    }
}

  static final public Exp NumToken() throws ParseException {
    trace_call("NumToken");
    try {
Token t;
      t = jj_consume_token(NUM);
{if ("" != null) return new Num(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumToken");
    }
}

  static final public Exp CharToken() throws ParseException {
    trace_call("CharToken");
    try {
Token t;
      t = jj_consume_token(CHAR);
{if ("" != null) return new Str(t.toString());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CharToken");
    }
}

  static final public Exp StrToken() throws ParseException {
    trace_call("StrToken");
    try {
Token t;
      t = jj_consume_token(STRING);
{if ("" != null) return new Str(t.toString());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StrToken");
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[18];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 1; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 18; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}

// Classes defining the Abstract Syntax Tree
abstract class Exp {

}

class Num extends Exp {
    int value;
    Num(int v) {value = v;}
    public String toString() {return value + "";}
}

class Str extends Exp {
    String value;
    Str(String v) {value = v;}
    public String toString() {return value;}
}

class TopText extends Exp {
        String txt;
        TopText(Exp text) { txt = text.toString();}
        public String toString()
        {
          return txt;
        }
}

class BinaryExp extends Exp {
    String op;
    Exp left, right;
    BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
    public String toString() {
                Parser.opGroup.add("(" + op + " " + left + " " + right + ")");
                return "(" + op + " " + left + " " + right + ")";
        }
}
